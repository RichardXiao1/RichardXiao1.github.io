knitr::opts_chunk$set(echo = TRUE)
summary(iris)
plot(iris)
library(usethis)
use_git_config(user.name = "RichardXiao1", user.email = "rcxiao@ncsu.edu")
library(rmarkdown)
library(tibble)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
knitr::opts_chunk$set(fig.path = "C:\Users\rcxia\OneDrive\Documents\ST558githubblogrepo\RichardXiao1.github.io\images")
library(knitr)
knitr::opts_chunk$set(fig.path = "C:/Users/rcxia/OneDrive/Documents/ST558githubblogrepo/RichardXiao1.github.io/images")
library(knitr)
knitr::opts_chunk$set(fig.path = "C:/Users/rcxia/OneDrive/Documents/ST558githubblogrepo/RichardXiao1.github.io/images")
library(rmarkdown)
library(tibble)
library(knitr)
knitr::opts_chunk$set(fig.path = "C:/Users/rcxia/OneDrive/Documents/ST558githubblogrepo/RichardXiao1.github.io/images")
library(Lahman)
library(tidyverse)
library(stats)
Pitchingtibble <- tibble::as_tibble(Pitching)
Pitchingtibble
library(Lahman)
library(tidyverse)
library(stats)
Pitchingtibble <- tibble::as_tibble(Pitching)
Pitchingtibble
#1
library(Lahman)
library(tidyverse)
library(stats)
Pitchingtibble <- tibble::as_tibble(Pitching)
Pitchingtibble
#1
library(Lahman)
library(tidyverse)
library(stats)
Pitchingtibble <- tibble::as_tibble(Pitching)
Pitchingtibble
#2
select(Pitchingtibble, ends_with("ID"), "IPouts", "SO", "BB")
#2
select(Pitchingtibble, ends_with("ID"), "IPouts", "SO", "BB")
#3
Pitchingtibble %>% select(ends_with("ID"), "IPouts", "SO", "BB") %>% filter(yearID >= "1970" & yearID <= "1990")
#4
Pitchingtibble %>% select(ends_with("ID"), "IPouts", "SO", "BB") %>% filter(yearID >= "1970" & yearID <= "1990") %>% mutate(ratio1 = (SO/BB)) %>% mutate(ratio2 = ((SO-BB)/IPouts))
#5
average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
average
#6
average %>% select("teamID", "mean1", "yearID") %>% pivot_wider(names_from = yearID, values_from = mean1)
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
#3
getCoefVar <- function(var, ...){
if(!is.numeric(var)){
stop("Input is not a numeric vector")
}
if(is.data.frame(var) && ncol(vec) == 1){
as.numeric(t(var))
}
if(!is.numeric(var)){
stop("This function only works for a numeric")
}
var.sd <- sd(var, ...)
var.mean <- abs(mean(var, ...))
coefvar <- var.sd/ var.mean
return(coefvar)
}
var <- c(1,3,5,6,7,8,9)
getCoefVar(var)
#4
var <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getCoefVar(var$mean2)
#5
getSummaries <- function(testinput){
return(list(getIQR(testinput), getCoefVar(testinput))) #Want to return as a list since we're calling in multiple functions.
}
testinput <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getSummaries(testinput$mean1)
#8
df1 <- data.frame(unif = runif(10), norm = rnorm(10))
df2 <- data.frame(gamma = rgamma(10, shape = 1), beta = rbeta(10, shape1 = 5, shape2 = 1))
vec1 <- rnorm(10, mean = 10)
infix <- function(...) #Ellipsis is used here to take on any number of arguments.
{
x <- list(...) # create a list here since there are multiple arguments.
cbind(...) # using inbuilt function
}
infix(df1,df2)
infix(df1,df2,vec1)
#1
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
#3
getCoefVar <- function(var, ...){
if(!is.numeric(var)){
stop("Input is not a numeric vector")
}
if(is.data.frame(var) && ncol(vec) == 1){
as.numeric(t(var))
}
if(!is.numeric(var)){
stop("This function only works for a numeric")
}
var.sd <- sd(var, ...)
var.mean <- abs(mean(var, ...))
coefvar <- var.sd/ var.mean
return(coefvar)
}
var <- c(1,3,5,6,7,8,9)
getCoefVar(var)
#4
var <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getCoefVar(var$mean2)
#5
getSummaries <- function(testinput){
return(list(getIQR(testinput), getCoefVar(testinput))) #Want to return as a list since we're calling in multiple functions.
}
#6
testinput <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getSummaries(testinput$mean1)
#8
df1 <- data.frame(unif = runif(10), norm = rnorm(10))
df2 <- data.frame(gamma = rgamma(10, shape = 1), beta = rbeta(10, shape1 = 5, shape2 = 1))
vec1 <- rnorm(10, mean = 10)
infix <- function(...) #Ellipsis is used here to take on any number of arguments.
{
x <- list(...) # create a list here since there are multiple arguments.
cbind(...) # using inbuilt function
}
infix(df1,df2)
infix(df1,df2,vec1)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
#1
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
getIQR(vec$mean1)
#3
getCoefVar <- function(var, ...){
if(!is.numeric(var)){
stop("Input is not a numeric vector")
}
if(is.data.frame(var) && ncol(vec) == 1){
as.numeric(t(var))
}
if(!is.numeric(var)){
stop("This function only works for a numeric")
}
var.sd <- sd(var, ...)
var.mean <- abs(mean(var, ...))
coefvar <- var.sd/ var.mean
return(coefvar)
}
var <- c(1,3,5,6,7,8,9)
getCoefVar(var)
#4
var <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getCoefVar(var$mean2)
#5
getSummaries <- function(testinput){
return(list(getIQR(testinput), getCoefVar(testinput))) #Want to return as a list since we're calling in multiple functions.
}
#6
testinput <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getSummaries(testinput$mean1)
#8
df1 <- data.frame(unif = runif(10), norm = rnorm(10))
df2 <- data.frame(gamma = rgamma(10, shape = 1), beta = rbeta(10, shape1 = 5, shape2 = 1))
vec1 <- rnorm(10, mean = 10)
infix <- function(...) #Ellipsis is used here to take on any number of arguments.
{
x <- list(...) # create a list here since there are multiple arguments.
cbind(...) # using inbuilt function
}
infix(df1,df2)
infix(df1,df2,vec1)
#1
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
getIQR(vec$mean1)
#3
getCoefVar <- function(var, ...){
if(!is.numeric(var)){
stop("Input is not a numeric vector")
}
if(is.data.frame(var) && ncol(vec) == 1){
as.numeric(t(var))
}
if(!is.numeric(var)){
stop("This function only works for a numeric")
}
var.sd <- sd(var, ...)
var.mean <- abs(mean(var, ...))
coefvar <- var.sd/ var.mean
return(coefvar)
}
var <- c(1,3,5,6,7,8,9)
getCoefVar(var)
#4
var <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getCoefVar(var$mean2)
getCoefVar(var$mean1)
#5
getSummaries <- function(testinput){
return(list(getIQR(testinput), getCoefVar(testinput))) #Want to return as a list since we're calling in multiple functions.
}
#6
testinput <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getSummaries(testinput$mean1)
#8
df1 <- data.frame(unif = runif(10), norm = rnorm(10))
df2 <- data.frame(gamma = rgamma(10, shape = 1), beta = rbeta(10, shape1 = 5, shape2 = 1))
vec1 <- rnorm(10, mean = 10)
infix <- function(...) #Ellipsis is used here to take on any number of arguments.
{
x <- list(...) # create a list here since there are multiple arguments.
cbind(...) # using inbuilt function
}
infix(df1,df2)
infix(df1,df2,vec1)
#1
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
vec <- c(1,2,3,4,5,6,7,8,9,10)
getIQR(vec)
#2
vec <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getIQR <- function(vec){
if(!is.numeric(vec)){
stop("Input is not a numeric vector")
}
if(is.data.frame(vec) && ncol(vec) == 1){
as.numeric(t(vec))
}
if(!is.numeric(vec)){
stop("This function only works for a numeric")
}
Q3 <- quantile(vec, .75)
Q1 <- quantile(vec, .25)
IQR <- Q3 - Q1
IQR
unname(IQR, force = FALSE)
}
getIQR(vec$mean2)
getIQR(vec$mean1)
#3
getCoefVar <- function(var, ...){
if(!is.numeric(var)){
stop("Input is not a numeric vector")
}
if(is.data.frame(var) && ncol(vec) == 1){
as.numeric(t(var))
}
if(!is.numeric(var)){
stop("This function only works for a numeric")
}
var.sd <- sd(var, ...)
var.mean <- abs(mean(var, ...))
coefvar <- var.sd/ var.mean
return(coefvar)
}
var <- c(1,3,5,6,7,8,9)
getCoefVar(var)
#4
var <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getCoefVar(var$mean2)
getCoefVar(var$mean1)
#5
getSummaries <- function(testinput){
return(list(getIQR(testinput), getCoefVar(testinput))) #Want to return as a list since we're calling in multiple functions.
}
#6
testinput <- average <- Pitchingtibble %>% group_by(yearID, teamID) %>% filter(yearID >= "2000" & yearID <= "2003")  %>% summarize(mean1 = mean(SO), mean2 = mean(BB))
getSummaries(testinput$mean1)
getSummaries(testinput$mean2)
#8
df1 <- data.frame(unif = runif(10), norm = rnorm(10))
df2 <- data.frame(gamma = rgamma(10, shape = 1), beta = rbeta(10, shape1 = 5, shape2 = 1))
vec1 <- rnorm(10, mean = 10)
infix <- function(...) #Ellipsis is used here to take on any number of arguments.
{
x <- list(...) # create a list here since there are multiple arguments.
cbind(...) # using inbuilt function
}
infix(df1,df2)
infix(df1,df2,vec1)
